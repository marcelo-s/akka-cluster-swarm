akka {
  actor {
    provider = "cluster"
    deployment {
      /router1 {
        router = round-robin-pool
        nr-of-instances = 20

        // Either one of the following configurations

        // Cluster aware routers
        cluster {
          enabled = on
          max-nr-of-instances-per-node = 2
          allow-local-routees = off
          use-roles = ["backend"]
        }

        // Router with Remote Destinations
        //        target {
        //          nodes = ["akka.tcp://ClusterSystem@127.0.0.1:2560", "akka.tcp://ClusterSystem@127.0.0.1:2570"]
        //        }
      }
    }
  }
  remote {
    log-remote-lifecycle-events = off
    retry-gate-closed-for = 15 s
    netty.tcp {
      bind-hostname = "0.0.0.0"
      bind-hostname = ${?BIND_HOST}  # internal (bind) hostname
      bind-port = ${?BIND_PORT} # internal (bind) port

      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed1-ip}":"${clustering.seed1-port},
      "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed2-ip}":"${clustering.seed2-port}
    ]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    # auto-down-unreachable-after = 10s
    jmx.enabled = on
  }

  management {
    http {
      hostname = ${clustering.seed2-ip}
      port = 8558
      bind-hostname = 0.0.0.0  # internal (bind) hostname
      bind-port = 8558 # internal (bind) port
    }
  }
}

akka.cluster.jmx.multi-mbeans-in-same-jvm = on

clustering {
  ip = "0.0.0.0"
  ip = ${?CLUSTER_IP}
  port = 0
  port = ${?CLUSTER_PORT}
  seed1-ip = "127.0.0.1"
  seed1-ip = ${?CLUSTER_IP}
  seed1-ip = ${?SEED1_TCP_ADDR}
  seed2-ip = "127.0.0.1"
  seed2-ip = ${?CLUSTER_IP}
  seed2-ip = ${?SEED2_TCP_ADDR}
  seed1-port = 2550
  seed1-port = ${?SEED_PORT_2550_TCP_PORT}
  seed2-port = 2560
  seed2-port = ${?SEED_PORT_2550_TCP_PORT}
  cluster.name = ClusterSystem
  role = "backend"
  role = ${?ROLE}
}

